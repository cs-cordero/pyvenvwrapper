################################################################################
#   Python Venv Wrapper
################################################################################

if [[ -z "$VENV_HOME" ]]; then
    export VENV_HOME="$HOME/.venv" # default
fi

if [[ -z "$VENV_PROJECT_FOLDER" ]]; then
    export VENV_PROJECT_FOLDER="$HOME/Projects" # default
fi

echoerr() {
    # print to stderr
    printf "E: %s\n" "$*" >&2;
}

# create if doesn't exist
[[ -d "$VENV_HOME" ]] || mkdir "$VENV_HOME"

if [[ ! -d "$VENV_PROJECT_FOLDER" ]]; then
    echo -n "$VENV_PROJECT_FOLDER does not exist. Create? [y/n]: "
    read -n 1 ans
    echo
    if [[ $ans == "y" ]] || [[ $ans == "Y" ]]; then
        mkdir "$VENV_PROJECT_FOLDER"
        if [[ $? = 0 ]]; then
            echo "Created Project folder at $VENV_PROJECT_FOLDER"
        else
            echoerr "Failed creating $VENV_PROJECT_FOLDER"
        fi
    fi
fi

if [[ ! -d "$VENV_PROJECT_FOLDER" ]] && [[ -z "$VENV_NO_PROJ" ]]; then
    echoerr "No project folder available!"
    echoerr "    Please create a folder at $VENV_PROJECT_FOLDER"
    echoerr "    or export a different folder name to variable VENV_PROJECT_FOLDER"
    echoerr "    or set a variable VENV_NO_PROJ=1 in order to skip this check entirely. (workon and mkproj may not work)."
    return 1
fi

lsvenv() {
    command ls "$VENV_HOME" | tr '\n' '\0' | xargs -0 -n 1 basename 2>/dev/null
}

activate() {
    if [[ $# -le 0 ]]; then
        echoerr "No arguments provided."
        return 1
    fi

    if [[ ! -d "$VENV_HOME/$1" ]]; then
        echoerr "Environment '$VENV_HOME/$1' does not contain an activate script."
        return 1
    fi

    if [[ -n "$VIRTUAL_ENV" ]]; then
        deactivate
    fi

    source "$VENV_HOME/$1/bin/activate"
}

workon() {
    if [[ ! -d "$VENV_PROJECT_FOLDER" ]]; then
        echoerr "The root projects folder $VENV_PROJECT_FOLDER does not exist."
        return 1
    fi

    if [[ $# -le 0 ]]; then
        echoerr "No arguments provided."
        return 1
    fi

    if [[ ! -d "$VENV_PROJECT_FOLDER/$1" ]]; then
        echoerr "The project $VENV_PROJECT_FOLDER/$1 does not exist."
        return 1
    fi

    activate $@
    [[ $? = 0 ]] && cd "$VENV_PROJECT_FOLDER/$1"
}

mkproj() {
    if [[ ! -d "$VENV_PROJECT_FOLDER" ]]; then
        echoerr "The root projects folder $VENV_PROJECT_FOLDER does not exist."
        return 1
    fi

    if [[ $# -le 0 ]]; then
        echoerr "No arguments provided."
        return 1
    fi

    if [[ -d "$VENV_PROJECT_FOLDER/$1" ]]; then
        echoerr "The project $VENV_PROJECT_FOLDER/$1 already exists."
        return 1
    fi

    mkvenv $@
    if [[ $? = 0 ]]; then
        mkdir "$VENV_PROJECT_FOLDER/$1"
        echo "Project folder created at $VENV_PROJECT_FOLDER/$1."
        cd "$VENV_PROJECT_FOLDER/$1"
    fi
}

mkvenv() {
    if [[ $# -le 0 ]]; then
        echoerr "No arguments provided."
        return 1
    fi

    if [[ -d "$VENV_HOME/$1" ]]; then
        echoerr "$1 already exists in $VENV_HOME."
        return 1
    fi

    if [[ -n "$VIRTUAL_ENV" ]]; then
        deactivate
    fi

    python3 -m venv "$VENV_HOME/$1"
    source "$VENV_HOME/$1/bin/activate"
    [[ $? = 0 ]] && echo "Python venv created at $VENV_HOME/$1."
}

rmvenv() {
    if [[ $# -le 0 ]]; then
        echoerr "No arguments provided."
        return 1
    fi

    if [[ ! -e "$VENV_HOME/$1" ]]; then
        echoerr "Environment '$VENV_HOME/$1' does not exist."
        return 1
    fi

    if [[ "$VIRTUAL_ENV" == "$VENV_HOME/$1" ]]; then
        deactivate
    fi

    rm -r "$VENV_HOME/$1"
    [[ $? = 0 ]] && echo "Python venv removed at $VENV_HOME/$1."
}
